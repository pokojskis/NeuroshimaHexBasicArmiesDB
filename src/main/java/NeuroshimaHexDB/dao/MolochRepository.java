package NeuroshimaHexDB.dao;

import NeuroshimaHexDB.dao.mappers.ResultSetMapper;
import NeuroshimaHexDB.dao.uow.UnitOfWork;
import NeuroshimaHexDB.domain.Moloch;

import java.sql.Connection;
import java.sql.SQLException;

public class MolochRepository extends SuperiorRepository<Moloch> {

    public MolochRepository(Connection connection, ResultSetMapper<Moloch> mapper, UnitOfWork uow) throws SQLException {
        super(connection, mapper, uow);
    }

    @Override
    protected String insertSql() {
        return "INSERT INTO moloch (unit_name, initiative, attributes) VALUES (?, ?, ?)";
    }

    @Override
    protected String updateSql() {
        return "UPDATE moloch SET (unit_name, initiative, attributes) = (?, ?, ?) WHERE id = ?";
    }

    @Override
    protected String deleteSql() {
        return "DELETE FROM moloch WHERE id = ?";
    }

    @Override
    protected String selectAllSql() {
        return "SELECT * FROM moloch";
    }

    @Override
    protected String tableName() {
        return "moloch";
    }

    @Override
    protected String createTableSql() {
        return "CREATE TABLE moloch ("
                + "id INT GENERATED BY DEFAULT AS IDENTITY,"
                + "unit_name VARCHAR(30),"
                + "initiative INT,"
                + "attributes VARCHAR(50)"
                + ")";
    }

    @Override
    protected void setupInsert(Moloch moloch) throws SQLException {
        insert.setString(1, moloch.getUnit_name());
        insert.setInt(2, moloch.getInitiative());
        insert.setString(3, moloch.getAttributes());
    }

    @Override
    protected void setUpdate(Moloch moloch) throws SQLException {
        update.setString(1, moloch.getUnit_name());
        update.setInt(2, moloch.getInitiative());
        update.setString(3, moloch.getAttributes());
        update.setInt(4, moloch.getId());
    }
}
